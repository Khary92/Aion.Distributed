@using Service.Admin.Web.Communication.Sprints
@using Service.Admin.Web.Communication.Sprints.State
@rendermode InteractiveServer
@inject ISprintStateService SprintStateService
@inject ISprintController SprintController

<div class="row">
    <div class="col-5">
        <h2>Sprints</h2>
        <div class="mb-2">
            <label>Sprint name</label>
            <input @bind="@SprintController.NewSprintName" class="form-control"/>
        </div>
        <div class="mb-2">
            <label>Start date</label>
            <InputDate @bind-Value="@SprintController.StartTime" class="form-control"/>
        </div>
        <div class="mb-2">
            <label>End date</label>
            <InputDate @bind-Value="@SprintController.EndTime" class="form-control"/>
        </div>
        <div class="mb-2">
            <button class="btn btn-success me-2"
                    disabled="@(!@SprintController.CanSave)"
                    @onclick="@(async () => await SprintController.PersistSprint())">Save
            </button>
            <button class="btn btn-warning me-2"
                    disabled="@(@SprintController.SelectedSprint is null)"
                    @onclick="@SprintController.ToggleEditMode">@SprintController.EditButtonText
            </button>
            <button class="btn btn-primary me-2"
                    disabled="@(@SprintController.SelectedSprint is null)"
                    @onclick="@(async () => await SprintController.SetSelectedSprintActive())">Set active
            </button>
        </div>
    </div>

    <div class="col-7">
        <table class="table table-bordered table-sm">
            <thead>
            <tr>
                <th>Name</th>
                <th>Start date</th>
                <th>End date</th>
                <th>Is active sprint</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var sprint in SprintStateService.Sprints)
            {
                <tr class="@(@SprintController.SelectedSprint == sprint ? "table-active" : "")"
                    @onclick="() => SprintController.SelectedSprint = sprint">
                    <td>@sprint.Name</td>
                    <td>@sprint.StartTime.ToString("d")</td>
                    <td>@sprint.EndTime.ToString("d")</td>
                    <td>@sprint.IsActive</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

@code {

    protected override async Task OnInitializedAsync()
    {
        SprintStateService.OnStateChanged += async () => await InvokeAsync(StateHasChanged);
        await SprintStateService.LoadSprints();
    }

}