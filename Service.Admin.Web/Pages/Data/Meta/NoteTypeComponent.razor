@using Service.Admin.Web.Communication.NoteType
@using Service.Admin.Web.Communication.NoteType.State
@rendermode InteractiveServer
@inject INoteTypeStateService NoteTypeStateService
@inject INoteTypeController NoteTypeController

<div class="row">
    <div class="col-5">
        <h2>Note Types</h2>
        <div class="mb-2">
            <label>Note type name</label>
            <input @bind="@NoteTypeController.InputName" class="form-control"/>
        </div>
        <div class="mb-2">
            <label>Color</label>
            <input type="color" @bind="@NoteTypeController.InputColor" class="form-control"/>
        </div>
        <div class="mb-2">
            <button class="btn btn-success me-2"
                    disabled="@(!NoteTypeController.CanSave)"
                    @onclick="async () => await NoteTypeController.CreateOrUpdate()">Save
            </button>
            <button class="btn btn-warning me-2"
                    disabled="@(NoteTypeController.SelectedNoteType == null)"
                    @onclick="@NoteTypeController.ToggleEditMode">@NoteTypeController.EditButtonText</button>
        </div>
    </div>

    <div class="col-7">
        <table class="custom-table">
            <thead>
            <tr>
                <th>Type</th>
                <th>Color</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var noteType in NoteTypeStateService.NoteTypes)
            {
                <tr class="@(NoteTypeController.SelectedNoteType == noteType ? "table-active" : "")"
                    @onclick="() => NoteTypeController.SelectedNoteType = noteType">
                    <td>@noteType.Name</td>
                    <td>
                        <div class="color-box" style="background-color: @noteType.Color"></div>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

<style>
    .color-box {
        width: 30px;
        height: 20px;
        border: 1px solid #ddd;
    }
</style>

@code {

    protected override async Task OnInitializedAsync()
    {
        NoteTypeStateService.OnStateChanged += async () => await InvokeAsync(StateHasChanged);
        await base.OnInitializedAsync();
    }

}