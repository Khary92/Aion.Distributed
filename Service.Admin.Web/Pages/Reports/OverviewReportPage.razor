@page "/reportsOverview"
@rendermode InteractiveServer
@inject IReportStateServiceFactory ReportStateServiceFactory
@using System.Globalization
@using Service.Admin.Web.Communication.Reports
@using Service.Admin.Web.Communication.Reports.Records
@using Service.Admin.Web.Communication.Reports.State
@using Service.Monitoring.Shared.Enums
@implements IDisposable

<PageTitle>Tracing Results</PageTitle>

<div class="full-page">
    <div class="sub-component">
        <ErrorBoundary>
            <ChildContent>
                <ReportTable Items="@_overViewReportStateService!.Reports" T="ReportRecord">
                    <HeaderTemplate>
                        <th>Date</th>
                        <th>Use case</th>
                        <th>Result</th>
                    </HeaderTemplate>
                    <RowTemplate>
                        <td>@context.TimeStamp.ToString("dd.MM.yyyy HH:mm:ss", CultureInfo.GetCultureInfo("de-DE"))</td>
                        <td>@context.UseCase</td>
                        <td>@context.State</td>
                    </RowTemplate>
                </ReportTable>
            </ChildContent>
            <ErrorContent Context="ex">
                <div class="alert alert-danger">
                    @ex.Message
                </div>
            </ErrorContent>
        </ErrorBoundary>
    </div>
</div>

@code {
    private IReportStateService? _overViewReportStateService;

    protected override Task OnInitializedAsync()
    {
        _overViewReportStateService = ReportStateServiceFactory.GetService(SortingType.Overview);
        _overViewReportStateService!.OnStateChanged += OnServiceStateChanged;
        return Task.CompletedTask;
    }

    private void OnServiceStateChanged()
    {
        _ = InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _overViewReportStateService!.OnStateChanged -= OnServiceStateChanged;
    }

}