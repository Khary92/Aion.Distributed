@page "/reports"
@rendermode InteractiveServer
@inject ILogger<ReportsPage> Logger
@inject IReportHubService ReportHubService
@inject IReportStateService ReportState
@using Service.Admin.Web.Communication.Reports
@using Service.Admin.Web.Communication.Reports.State
@implements IDisposable

<PageTitle>Tracing Results</PageTitle>

<div class="container">
    <h1>Use Cases</h1>

    <ErrorBoundary>
        <ChildContent>
            @if (_isLoading)
            {
                <LoadingSpinner />
            }
            else if (!ReportState.Reports.Any())
            {
                <div class="alert alert-info">
                    Keine Berichte verfügbar.
                </div>
            }
            else
            {
                <ReportTable Items="@ReportState.Reports" T="ReportRecord">
                    <HeaderTemplate>
                        <th>Datum</th>
                        <th>Status</th>
                    </HeaderTemplate>
                    <RowTemplate>
                        <td>@context.TimeStamp</td>
                        <td>@context.State</td>
                    </RowTemplate>
                </ReportTable>

                <h2>Traces</h2>
                <ReportTable Items="@GetTraces()" T="TraceInfo">
                    <HeaderTemplate>
                        <th>Zeitstempel</th>
                        <th>Ergebnis</th>
                        <th>Log Info</th>
                    </HeaderTemplate>
                    <RowTemplate>
                        <td>@context.TimeStamp</td>
                        <td>@context.Result</td>
                        <td>@context.LogInfo</td>
                    </RowTemplate>
                </ReportTable>
            }
        </ChildContent>
        <ErrorContent Context="ex">
            <div class="alert alert-danger">
                @ex.Message
            </div>
        </ErrorContent>
    </ErrorBoundary>
</div>

@code {
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ReportState.OnStateChanged += StateHasChanged;
            await ReportHubService.InitializeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Fehler beim Initialisieren der Hub-Verbindung");
            throw;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private IEnumerable<TraceInfo> GetTraces()
    {
        return ReportState.Reports.SelectMany(r => r.Traces.Select(t =>
        {
            var data = t.Split('|');
            return new TraceInfo
            {
                TimeStamp = data[0],
                Result = data[1],
                LogInfo = data[2]
            };
        }));
    }

    public void Dispose()
    {
        ReportState.OnStateChanged -= StateHasChanged;
    }

    private record TraceInfo
    {
        public string TimeStamp { get; init; } = string.Empty;
        public string Result { get; init; } = string.Empty;
        public string LogInfo { get; init; } = string.Empty;
    }
}