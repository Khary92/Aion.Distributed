@page "/reports"
@using Service.Admin.Web.Communication.Reports
@using Service.Admin.Web.Communication.Reports.Records
@using Service.Admin.Web.Communication.Reports.State
@using Service.Monitoring.Shared.Enums
@rendermode InteractiveServer
@inject IReportStateServiceFactory StateServiceFactory

<div class="mb-3">
    <label for="sortSelect" class="form-label">Sort by</label>
    <select id="sortSelect" class="form-select" @bind="SelectedSortingType">
        @foreach (var sorting in Enum.GetValues<SortingType>())
        {
            if (sorting == SortingType.Overview) continue;
            <option value="@sorting">@sorting</option>
        }
    </select>
    <select id="reportSelect" class="form-select" @bind="SelectedReportIndex"
            disabled="@(_reportStateService?.Reports?.Any() != true)">
        @if (_reportStateService?.Reports?.Any() == true)
        {
            @foreach (var item in _reportStateService.Reports.Select((r, i) => new { Report = r, Index = i }))
            {
                <option value="@item.Index">@item.Report.UseCase</option>
            }
        }
        else
        {
            <option value="-1">No reports available</option>
        }
    </select>
</div>

@if (_reportStateService != null && @SelectedReportRecord != null)
{
    <div @key="SelectedSortingType">
        <table class="custom-table">
            <thead>
            <tr>
                <th>Datum</th>
                <th>UseCase</th>
                <th>Status</th>
                <th>Traces</th>
            </tr>
            </thead>
            <tbody>

            <tr>
                <td>@SelectedReportRecord?.TimeStamp</td>
                <td>@SelectedReportRecord?.UseCase</td>
                <td>@SelectedReportRecord?.State</td>
                <td>
                    <table class="custom-table">
                        <thead>
                        <tr>
                            <th>Time Stamp</th>
                            <th>Meta</th>
                            <th>Origin class</th>
                            <th>Log</th>
                        </tr>
                        </thead>
                        <tbody>
                        @if (SelectedReportRecord is not null)
                        {
                            foreach (var trace in SelectedReportRecord.Traces)
                            {
                                <tr>
                                    <td>@trace.TimeStamp</td>
                                    <td>@trace.LoggingMeta</td>
                                    <td>@trace.OriginClass</td>
                                    <td>@trace.Log</td>
                                </tr>
                            }
                        }
                        </tbody>
                    </table>
                </td>
            </tr>
            </tbody>
        </table>
    </div>
}

@code {
    private IReportStateService? _reportStateService;

    private SortingType _selectedSortingType = SortingType.Ticket;
    private ReportRecord? _selectedReportRecord;
    private int _selectedReportIndex = -1;

    private SortingType SelectedSortingType
    {
        get => _selectedSortingType;
        set
        {
            if (_selectedSortingType == value) return;
            _selectedSortingType = value;
            LoadSelectedReportStateService();
        }
    }

    private int SelectedReportIndex
    {
        get => _selectedReportIndex;
        set
        {
            if (_selectedReportIndex == value) return;
            _selectedReportIndex = value;
            UpdateSelectedReportRecord();
        }
    }

    private ReportRecord? SelectedReportRecord
    {
        get => _selectedReportRecord;
        set
        {
            if (_selectedReportRecord == value) return;
            _selectedReportRecord = value;
        }
    }

    protected override void OnInitialized()
    {
        LoadSelectedReportStateService();
    }

    private void LoadSelectedReportStateService()
    {
        if (_reportStateService is not null)
        {
            _reportStateService.OnStateChanged -= OnServiceStateChanged;
        }

        _reportStateService = StateServiceFactory.Get(SelectedSortingType);
        _reportStateService!.OnStateChanged += OnServiceStateChanged;

        _selectedReportIndex = _reportStateService.Reports?.Any() == true ? 0 : -1;
        UpdateSelectedReportRecord();

        _ = InvokeAsync(StateHasChanged);
    }

    private void UpdateSelectedReportRecord()
    {
        var reports = _reportStateService?.Reports?.ToList();
        if (reports is null || reports.Count == 0)
        {
            SelectedReportRecord = null;
            return;
        }

        if (_selectedReportIndex < 0 || _selectedReportIndex >= reports.Count)
        {
            _selectedReportIndex = 0;
        }

        SelectedReportRecord = reports[_selectedReportIndex];
    }

    private void OnServiceStateChanged()
    {
        UpdateSelectedReportRecord();
        _ = InvokeAsync(StateHasChanged);
    }

}