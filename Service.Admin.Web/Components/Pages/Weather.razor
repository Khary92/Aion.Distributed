@page "/weather"
@using Service.Admin.Web.Communication
@using Service.Admin.Web.Communication.Reports
@inject ReportEventBridge Bridge
@inject ILogger<Weather> Logger
@attribute [StreamRendering]

<PageTitle>Tracing results</PageTitle>

<h1>Use cases</h1>

@if (!_reports.Any())
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>State</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var report in _reports)
        {
            <tr>
                <td>@report.TimeStamp</td>
                <td>@report.State</td>
            </tr>
        }
        </tbody>
    </table>

    <h2>Traces</h2>
    <table class="table">
        <thead>
        <tr>
            <th>TimeStamp</th>
            <th>Result</th>
            <th>Log info</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var report in _reports)
        {
            @foreach (var trace in report.Traces)
            {
                var data = trace.Split('|');
                <tr>
                    <td>@data[0]</td>
                    <td>@data[1]</td>
                    <td>@data[2]</td>
                </tr>
            }
        }
        </tbody>
    </table>
}

@code {
    private IReadOnlyCollection<ReportRecord> _reports = Array.Empty<ReportRecord>();

    protected override void OnInitialized()
    {
        _reports = Bridge.Reports;
        Bridge.OnNewReport += async (report) => await HandleNewReport(report);
        base.OnInitialized();
    }

    private async Task HandleNewReport(ReportRecord report)
    {
        await InvokeAsync(() =>
        {
            Logger.Log(LogLevel.Information, "Report handled in razor page");
            _reports = Bridge.Reports;
            StateHasChanged();
        });
    }

}
