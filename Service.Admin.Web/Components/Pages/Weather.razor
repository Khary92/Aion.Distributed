@page "/weather"
@using Microsoft.AspNetCore.SignalR.Client
@using Service.Admin.Web.Communication
@using Service.Admin.Web.Communication.Reports
@inject ILogger<Weather> Logger
@rendermode InteractiveServer
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Tracing results</PageTitle>

<h1>Use cases</h1>

@if (!_reports.Any())
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>State</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var report in _reports)
        {
            <tr>
                <td>@report.TimeStamp</td>
                <td>@report.State</td>
            </tr>
        }
        </tbody>
    </table>

    <h2>Traces</h2>
    <table class="table">
        <thead>
        <tr>
            <th>TimeStamp</th>
            <th>Result</th>
            <th>Log info</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var report in _reports)
        {
            @foreach (var trace in report.Traces)
            {
                var data = trace.Split('|');
                <tr>
                    <td>@data[0]</td>
                    <td>@data[1]</td>
                    <td>@data[2]</td>
                </tr>
            }
        }
        </tbody>
    </table>
}

@code {
    private List<ReportRecord> _reports = new();
    private HubConnection? _hubConnection;
    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl($"http://localhost:8080/reportHub") 
            .WithAutomaticReconnect() 
            .Build();
        
        _hubConnection.On<ReportRecord>("ReceiveReport", (record) =>
        {
            _reports.Add(record);
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
        await base.OnInitializedAsync();
    }
    
    public bool IsConnected =>
        _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
